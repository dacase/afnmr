#!/usr/bin/perl -w

#******************************************************************************
# collect shifts from qchem outputs
#   usage:  getshifts-qchem reference basename; rdb file fragments to stdout
#******************************************************************************

$resi = 0;

$reference = "$ARGV[0]";
$basename = "$ARGV[1]";

if( $reference eq "ref_seg0" ){
   $reference_set = "OLYP ref_seg0 ";
   $ref{"H"} = 33.2;   # TMS
   $ref{"C"} = 189.9;  # TMS
   $ref{"N"} = 241.2;  # CH3NO2 + 380.5
   $ref{"P"} = 300.0;  # guess
   $ref{"F"} = 130.2;  # CFCl3
} elsif( $reference eq "ref_seg1" ){
   $reference_set = "OLYP ref_seg1 ";
   $ref{"H"} = 31.6;   # TMS
   $ref{"C"} = 183.1;  # TMS
   $ref{"N"} = 254.9;  # CH3NO2 + 380.5
   $ref{"P"} = 325.0;  # guess
   $ref{"F"} = 139.6;  # CFCl3
} else {
   die "unrecognized reference set: $reference\n";
}


if( $basename eq "header" ){
   # document the reference shieldings being used:
   printf( "# results from afnmr-qchem:\n" );
   printf( "# reference shieldings used for H,C,N,P,F: %6.2f %6.2f %6.2f %6.2f %6.2f %s\n",
       $ref{"H"}, $ref{"C"}, $ref{"N"}, $ref{"P"}, $ref{"F"}, $reference_set );

   printf( "res\tatomname\tresname\tshift\tdelta\n" );
   printf( "4N\t8\t8\t10N\t10N\n" );

   exit(0);
}

$_ = $basename; s/.+(\d\d\d)/$1/; $resi = $_;

# get atom and residue names from pqr file:

open (PQR, "<", "$basename". ".pqr") or die "cannot open $basename.pqr";
$iat = 0;
while (<PQR>) {
    next unless m/^ATOM  /; 
    @f = split( ' ', $_ );
	$iat++; $aname[$iat] = $f[2]; $rname[$iat] = $f[3]; $res[$iat] = $f[4];
    $rname[$iat] =~ s/^([ACTGU])[35]$/$1/;  # fix 3',5' ends of nucleic acids
    # $x[$iat] = $f[5]; $y[$iat] = $f[6]; $z[$iat] = $f[7];
}
close PQR;

# read in the shift data

open (LOG, "<", "$basename" . ".qcout") or die "cannot open $basename.qcout";

while (<LOG>) {

   if (m/^  -- ATOM/){

       @f = split( ' ', $_ ); $iat = $f[3]; $elem = $f[2];
       next if $elem eq "O";  next if $rname[$iat] eq "MOD";
       next if $elem eq "S";
       #  get just the shifts in the "primary residue" (includes previous C):
       next unless $iat<3 or ($res[$iat]==$resi and $aname[$iat] ne "C")  or
                   ($aname[$iat] eq "C" and $res[$iat]==$resi - 1);

       <LOG>;<LOG>;
       $_ = <LOG>; @f = split( ' ', $_ );
       $siso = $f[1]; $saniso = -$f[3];

       printf "%d\t%s\t%s\t%8.3f\t%8.3f\n", 
          $res[$iat],$aname[$iat],$rname[$iat], $ref{$elem} - $siso, $saniso;

       # handle averaging of methyl proton shifts:
       $i = $iat;
       if (($rname[$i] eq "ALA" && $aname[$i] =~ /HB1/) ||
               ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]1/) ||
               ($rname[$i] eq "MET" && $aname[$i] =~ /HE1/) ||
               ($rname[$i] eq "DT"  && $aname[$i] =~ /H71/) ||
               ($rname[$i] eq "VAL" && $aname[$i] =~ /HG11/) ||
               $aname[$i]  =~ /HG21/ || $aname[$i]  =~ /HH31/ ||
               $aname[$i]  =~ /HZ1/ ){
           $mav = $ref{$elem} - $siso;
       } elsif (($rname[$i] eq "ALA" && $aname[$i] =~ /HB2/) ||
               ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]2/) ||
               ($rname[$i] eq "MET" && $aname[$i] =~ /HE2/) ||
               ($rname[$i] eq "DT"  && $aname[$i] =~ /H72/) ||
               ($rname[$i] eq "VAL" && $aname[$i] =~ /HG12/) ||
               $aname[$i]  =~ /HG22/ || $aname[$i]  =~ /HH32/ ||
               $aname[$i]  =~ /HZ2/ ){
           $mav += $ref{$elem} - $siso;
       } elsif (($rname[$i] eq "ALA" && $aname[$i] =~ /HB3/) ||
               ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]3/) ||
               ($rname[$i] eq "MET" && $aname[$i] =~ /HE3/) ||
               ($rname[$i] =~ /DT/  && $aname[$i] =~ /H73/) ||
               ($rname[$i] eq "VAL" && $aname[$i] =~ /HG13/) ||
               $aname[$i]  =~ /HG23/ || $aname[$i]  =~ /HH33/ ||
               $aname[$i]  =~ /HZ3/ ){
           $mav += $ref{$elem} - $siso;
           $mav = $mav / 3.;
           if( $aname[$i] =~ /H[E7BZ]/ ){
               $label = substr($aname[$i],0,2) . "av";
           } else {
               $label = substr($aname[$i],0,3) . "av";
           }
             printf "%d\t%s\t%s\t%8.3f\t%8.3f\n", 
                $res[$i],$label,$rname[$i], $mav, 0.0;
       }

   }
}
close LOG;
