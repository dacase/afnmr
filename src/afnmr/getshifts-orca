#!/usr/bin/perl -w

#***************************************************************
# collect shifts from orca outputs
#   usage:  getshifts-orca reference basename [header]; rdb file to stdout
#***************************************************************

sub numerically { $a <=> $b; }

@ARGV >= 2 or die " usage: getshifts-orca reference basename [header] \n";
$reference = "$ARGV[0]";
$basename = "$ARGV[1]";

if( $#ARGV == 2 ){
   $header = "$ARGV[2]";
} else {
   $header = "";
}

#  reference shieldings; (these are basis/functional dependent!)
if( $reference eq "ref_seg0" ){
   $reference_set = "OLYP ref_seg0 ";
   $ref{"H"} = 33.2;   # TMS
   $ref{"C"} = 189.8;  # TMS
   $ref{"N"} = 241.0;  # CH3NO2 + 380.5
   $ref{"P"} = 300.0;  # guess
   $ref{"F"} = 130.2;  # CFCl3
} elsif( $reference eq "ref_seg1" ){
   $reference_set = "OLYP ref_seg1 ";
   $ref{"H"} = 31.7;   # TMS
   $ref{"C"} = 183.1;  # TMS
   $ref{"N"} = 255.2;  # CH3NO2 + 380.5
   $ref{"P"} = 325.0;  # guess
   $ref{"F"} = 139.6;  # CFCl3
} elsif( $reference eq "ref_seg2" ){
   $reference_set = "OLYP ref_seg2 ";
   $ref{"H"} = 31.7;   # TMS
   $ref{"C"} = 182.4;  # TMS
   $ref{"N"} = 240.0;  # CH3NO2 + 380.5
   $ref{"P"} = 325.0;  # guess
   $ref{"F"} = 137.7;  # CFCl3
} elsif( $reference eq "ref3_seg1" ){
   $reference_set = "O3LYP pcSseg-1 ";
   $ref{"H"} = 32.0;   # TMS, then fit to ernst_avg
   $ref{"C"} = 182.4;  # TMS, then fit to ernst_avg
   $ref{"N"} = 234.8;  # CH3NO2 + 380.5, then fit to ernst_avg
   $ref{"P"} = 325.0;  # guess
   $ref{"F"} = 149.7;  # CFCl3
} elsif( $reference eq "ref3_seg2" ){
   $reference_set = "O3LYP pcSseg-2 ";
   $ref{"H"} = 32.0;   # TMS
   $ref{"C"} = 182.4;  # TMS
   $ref{"N"} = 234.8;  # CH3NO2 + 380.5
   $ref{"P"} = 325.0;  # guess
   $ref{"F"} = 148.2;  # CFCl3
} else {
   die "unrecognized reference set: $reference\n";
}

if( $header eq "header" ){
   # document the reference shieldings being used:
   printf( "# results from afnmr-orca:\n" );
   printf( "# reference shieldings used for H,C,N,P,F: %6.2f %6.2f %6.2f %6.2f %6.2f %s\n",
       $ref{"H"}, $ref{"C"}, $ref{"N"}, $ref{"P"}, $ref{"F"}, $reference_set );
   printf( "res\tatomname\tresname\t${basename}_shift\t${basename}_saniso\n" );
   printf( "4N\t8\t8\t10N\t10N\n" );
   exit(0);
}

# get atom and residue names from pqr file:

open (PQR, "<", "$basename". ".pqr") or die "cannot open $basename.pqr";
$iat = 0;
while (<PQR>) {
	next unless m/^ATOM  /; 
    @f = split( ' ', $_ );
	$iat++; $aname[$iat] = $f[2]; $rname[$iat] = $f[3]; $res[$iat] = $f[4];
	$rname[$iat] =~ s/^([ACTGU])[35]$/$1/;  # fix 3',5' ends of nucleic acids
}
close PQR;
$nat = $iat;

# read in the shift data

open (OUT, "<", "$basename" . ".out") or die "cannot open $basename.out";

while (<OUT>) {

      if( m/^CHEMICAL SHIELDING SUMMARY/){
         <OUT>;<OUT>;<OUT>;<OUT>;<OUT>;
         @a = (1..$nat);
         for $i (@a){
            $line = <OUT>;
            if( $line =~ m/^$/ ){ exit(0); }
            ($iat, $elem, $siso, $saniso) = split( ' ', $line );
            next if $elem eq "O";  next if $rname[$i] eq "MOD";
            next if $elem eq "S";
            # solution state convention:
            $saniso = -1.5 * $saniso;
            printf "%d\t%s\t%s\t%8.3f\t%8.3f\n",
              $res[$i],$aname[$i],$rname[$i], $ref{$elem} - $siso, $saniso;

            # handle averaging of methyl proton shifts:
            if (($rname[$i] eq "ALA" && $aname[$i] =~ /HB1/) ||
                    ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]1/) ||
                    ($rname[$i] eq "MET" && $aname[$i] =~ /HE1/) ||
                    ($rname[$i] eq "DT"  && $aname[$i] =~ /H71/) ||
                    ($rname[$i] eq "VAL" && $aname[$i] =~ /HG11/) ||
                    $aname[$i]  =~ /HG21/ || $aname[$i]  =~ /HH31/ ||
                    $aname[$i]  =~ /HZ1/ ){
                $mav = $ref{$elem} - $siso;
            } elsif (($rname[$i] eq "ALA" && $aname[$i] =~ /HB2/) ||
                    ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]2/) ||
                    ($rname[$i] eq "MET" && $aname[$i] =~ /HE2/) ||
                    ($rname[$i] eq "DT"  && $aname[$i] =~ /H72/) ||
                    ($rname[$i] eq "VAL" && $aname[$i] =~ /HG12/) ||
                    $aname[$i]  =~ /HG22/ || $aname[$i]  =~ /HH32/ ||
                    $aname[$i]  =~ /HZ2/ ){
                $mav += $ref{$elem} - $siso;
            } elsif (($rname[$i] eq "ALA" && $aname[$i] =~ /HB3/) ||
                    ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]3/) ||
                    ($rname[$i] eq "MET" && $aname[$i] =~ /HE3/) ||
                    ($rname[$i] =~ /DT/  && $aname[$i] =~ /H73/) ||
                    ($rname[$i] eq "VAL" && $aname[$i] =~ /HG13/) ||
                    $aname[$i]  =~ /HG23/ || $aname[$i]  =~ /HH33/ ||
                    $aname[$i]  =~ /HZ3/ ){
                $mav += $ref{$elem} - $siso;
                $mav = $mav / 3.;
                if( $aname[$i] =~ /H[E7BZ]/ ){
                    $label = substr($aname[$i],0,2) . "av";
                } else {
                    $label = substr($aname[$i],0,3) . "av";
                }
                printf "%d\t%s\t%s\t%8.3f\t%8.3f\n",
                  $res[$i],$label, $rname[$i], $mav, 0.0;
            }

         }
         exit(0);
      }
}
close OUT;
