#!/usr/bin/perl -w

#******************************************************************************
# collect shifts from demon outputs
#   usage:  getshifts-demon reference basename; rdb file to stdout
#******************************************************************************

sub numerically { $a <=> $b; }
sub acos { atan2( sqrt( 1. - $_[0]*$_[0] ), $_[0] ) }

@ARGV >= 2 or die " usage: getshifts-demon reference basename [header]\n";
$reference = "$ARGV[0]";
$basename = "$ARGV[1]";

if( $#ARGV == 2 ){
   $header = "$ARGV[2]";
} else {
   $header = "";
}

if( $reference eq "ref_seg0" ){
   $reference_set = "OLYP ref_seg0 GEN-A2";
   $ref{"H"} = 33.3;   # TMS
   $ref{"C"} = 191.8;  # TMS
   $ref{"N"} = 241.8;  # CH3NO2 + 380.5
   $ref{"P"} = 300.0;  # guess
   $ref{"F"} = 136.0;  # CFCl3
} elsif( $reference eq "ref_seg1" ){
   $reference_set = "OLYP ref_seg1 GEN-A2*";
   $ref{"H"} = 31.6;   # TMS
   $ref{"C"} = 181.5;  # TMS
   $ref{"N"} = 253.6;  # CH3NO2 + 380.5
   $ref{"P"} = 325.0;  # guess
   $ref{"F"} = 137.4;  # CFCl3
} else {
   die "unrecognized reference set: $reference\n";
}

if( $header eq "header" ){
   # document the reference shieldings being used:
   printf( "# results from afnmr-demon:\n" );
   printf( "# reference shieldings used for H,C,N,P,F: %6.2f %6.2f %6.2f %6.2f %6.2f %s\n",
       $ref{"H"}, $ref{"C"}, $ref{"N"}, $ref{"P"}, $ref{"F"}, $reference_set );

   printf(
"res\tatomname\tresname\t${basename}_shift\t${basename}_delta\t${basename}_eta\t${basename}_theta\n" );
   printf( "8N\t8\t8\t10N\t10N\t10N\t10N\n" );

   exit(0);
}

# get atom and residue names from pqr file:

open (PQR, "<", "$basename". ".pqr") or die "cannot open $basename.pqr";
$iat = 0;
while (<PQR>) {
    next unless m/^ATOM  /; 
    @f = split( ' ', $_ );
	$iat++; $aname[$iat] = $f[2]; $rname[$iat] = $f[3]; $res[$iat] = $f[4];
	$rname[$iat] =~ s/^([ACTGU])[35]$/$1/;  # fix 3',5' ends of nucleic acids
    $x[$iat] = $f[5]; $y[$iat] = $f[6]; $z[$iat] = $f[7];
}
close PQR;

# read in the shift data

open (OUT, "<", "$basename" . ".out") or die "cannot open $basename.out";

while ($_ = <OUT>) {

   if (m/CHEMICAL SHIELDING FOR/) {

       @f = split( ' ', $_ ); $iat = $f[4]; $elem = substr($f[6],0,1);
       next if $elem eq "O";  next if $rname[$iat] eq "MOD";
       next if $elem eq "S";
       <OUT>; <OUT>; <OUT>; <OUT>; 

       #  get full shielding tensor:
       $_ = <OUT>; @f = split( ' ', $_ ); 
       # $sxx=$f[1]; $sxy=$f[2]; $sxz=$f[3];

       $_ = <OUT>; @f = split( ' ', $_ ); 
       # $syx=$f[1]; $syy=$f[2]; $syz=$f[3];

       $_ = <OUT>; @f = split( ' ', $_ ); 
       # $szx=$f[1]; $szy=$f[2]; $szz=$f[3];

       #  get the isotropic shift:
       <OUT>; <OUT>; <OUT>; $_ = <OUT>; @f = split( ' ', $_ ); 
       $diso = $ref{$elem} - $f[3];

       #  get the principal components of the shift tensor:
       <OUT>; <OUT>; $_ = <OUT>; @f = split( ' ', $_ ); 
       $d11=$ref{$elem} - $f[0]; 
       $d22=$ref{$elem} - $f[1]; 
       $d33=$ref{$elem} - $f[2]; 

       # get the eigenvectors:
       $_ = <OUT>; @f = split( ' ', $_ ); 
       $v11 = $f[0]; $v21 = $f[1]; $v31 = $f[2];
       $_ = <OUT>; @f = split( ' ', $_ ); 
       $v12 = $f[0]; $v22 = $f[1]; $v32 = $f[2];
       $_ = <OUT>; @f = split( ' ', $_ ); 
       $v13 = $f[0]; $v23 = $f[1]; $v33 = $f[2];

       # get delta and eta using the Haberlin convention:
       @eigval = sort numerically $d11,$d22,$d33;
       if( abs($diso - $eigval[0]) > abs($diso - $eigval[2]) ){
          $delta  = -$diso + $eigval[0];  $eta = ($eigval[1]-$eigval[2])/$delta;
       } else {
          $delta  = -$diso + $eigval[2];  $eta = ($eigval[1]-$eigval[0])/$delta;
       }
       # uncomment next line to use solution-state definition of delta:
       $delta *= -1.5;

       if( $aname[$iat] eq "N" ){
          # N-H vector:
          $NHx = $x[4]-$x[3]; $NHy = $y[4]-$y[3]; $NHz = $z[4]-$z[3];
          $NH = sqrt( $NHx*$NHx + $NHy*$NHy + $NHz*$NHz );
          $NHx /= $NH; $NHy /= $NH; $NHz /= $NH;

          # Angles to N-H vector:
          $alpha1 = acos( $v11*$NHx + $v12*$NHy + $v13*$NHz)*180./3.14159;
          $alpha2 = acos( $v21*$NHx + $v22*$NHy + $v23*$NHz)*180./3.14159;
          $alpha3 = acos( $v31*$NHx + $v32*$NHy + $v33*$NHz)*180./3.14159;
          if( $alpha1 > 90. ){ $alpha1 = 180. - $alpha1; }
          if( $alpha2 > 90. ){ $alpha2 = 180. - $alpha2; }
          if( $alpha3 > 90. ){ $alpha3 = 180. - $alpha3; }

          printf "%d\t%s\t%s\t%8.3f\t%8.3f\t%8.3f\t%6.1f\n", 
            $res[$iat],$aname[$iat],$rname[$iat], $diso,
            $delta, $eta, $alpha1;

       } elsif( $aname[$iat] eq "CA" ){
          # CA-H vector:
          $CHx = $x[6]-$x[5]; $CHy = $y[6]-$y[5]; $CHz = $z[6]-$z[5];
          $CH = sqrt( $CHx*$CHx + $CHy*$CHy + $CHz*$CHz );
          $CHx /= $CH; $CHy /= $CH; $CHz /= $CH;

          # Angles to C-H vector:
          $alpha1 = acos( $v11*$CHx + $v12*$CHy + $v13*$CHz)*180./3.14159;
          $alpha2 = acos( $v21*$CHx + $v22*$CHy + $v23*$CHz)*180./3.14159;
          $alpha3 = acos( $v31*$CHx + $v32*$CHy + $v33*$CHz)*180./3.14159;
          if( $alpha1 > 90. ){ $alpha1 = 180. - $alpha1; }
          if( $alpha2 > 90. ){ $alpha2 = 180. - $alpha2; }
          if( $alpha3 > 90. ){ $alpha3 = 180. - $alpha3; }
          printf "%d\t%s\t%s\t%8.3f\t%8.3f\t%8.3f\t%6.1f\n", 
            $res[$iat],$aname[$iat],$rname[$iat], $diso,
            $delta, $eta, $alpha1;
       } else {
          printf "%d\t%s\t%s\t%8.3f\t%8.3f\t%8.3f\t\t\t\n", 
            $res[$iat],$aname[$iat],$rname[$iat],$diso, $delta, $eta;
          # handle averaging of methyl proton shifts:
          $i = $iat;
          if (($rname[$i] eq "ALA" && $aname[$i] =~ /HB1/) ||
                ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]1/) ||
                ($rname[$i] eq "MET" && $aname[$i] =~ /HE1/) ||
                ($rname[$i] eq "DT"  && $aname[$i] =~ /H71/) ||
                ($rname[$i] eq "VAL" && $aname[$i] =~ /HG11/) ||
                $aname[$i]  =~ /HG21/ || $aname[$i]  =~ /HH31/ ||
                $aname[$i]  =~ /HZ1/ ){
            $mav = $diso;
          } elsif (($rname[$i] eq "ALA" && $aname[$i] =~ /HB2/) ||
                ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]2/) ||
                ($rname[$i] eq "MET" && $aname[$i] =~ /HE2/) ||
                ($rname[$i] eq "DT"  && $aname[$i] =~ /H72/) ||
                ($rname[$i] eq "VAL" && $aname[$i] =~ /HG12/) ||
                $aname[$i]  =~ /HG22/ || $aname[$i]  =~ /HH32/ ||
                $aname[$i]  =~ /HZ2/ ){
            $mav += $diso;
          } elsif (($rname[$i] eq "ALA" && $aname[$i] =~ /HB3/) ||
                ($rname[$i] ne "ASN" && $aname[$i] =~ /HD[12]3/) ||
                ($rname[$i] eq "MET" && $aname[$i] =~ /HE3/) ||
                ($rname[$i] =~ /DT/  && $aname[$i] =~ /H73/) ||
                ($rname[$i] eq "VAL" && $aname[$i] =~ /HG13/) ||
                $aname[$i]  =~ /HG23/ || $aname[$i]  =~ /HH33/ ||
                $aname[$i]  =~ /HZ3/ ){
            $mav += $diso;
            $mav = $mav / 3.;
            if( $aname[$i] =~ /H[E7BZ]/ ){
                $label = substr($aname[$i],0,2) . "av";
            } else {
                $label = substr($aname[$i],0,3) . "av";
            }
            printf "%d\t%s\t%s\t%8.3f\t%8.3f\t%8.3f\t\t\t\n", 
               $res[$iat],$label,$rname[$iat],$mav, 0.0, 0.0;
          }

       }
   }
}
close OUT;
