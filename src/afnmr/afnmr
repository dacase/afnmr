#!/bin/bash
#set -xv

#  Automate all the steps needed to take a system through af-nmr.  

#------------------------------------------------------------------------------
#  set up usage statement:
#------------------------------------------------------------------------------
usage(){
cat<<EOD

Usage: `basename $0` [flags] basename

   where the file "basename.pdb" must be present

Optional flags:
   -list           list of residues to create fragments for; uses bash 
                      syntax and must be quoted, e.g.:
                      "{1,2,{4..9},13}" or "6 13" or "{5..8}"
                   Residue numbers are those in the pdb file, and must
                       be unique: afnmr does not process chainID's
                   If this flag is not present, fragments will be created
                       for residues 1 up to the last protein or nucleic acid
                       residue
                   If the list is "0", no fragmentation will be done, and
                       and the entire molecule will be treated by QM

   -seg0           all residues are treated at the pcSseg-0 level (default,
                       but mainly for historical reasons; -seg1 is often
                       better)
   -seg1           all residues are treated at the pcSseg-1 level
   -seg2           all residues are treated at the pcSseg-2 level
   -aug-seg1       all residues are treated at the aug-pcSseg-1 level
   -mixedb         use a mixed basis with the primary residue at pcSseg-2,
                   (pcJ-2 if -J is set); others at pcSseg-1

   -o3lyp          Use O3LYP in place of OLYP; requires -gau, -qchem, or -orca
   -nbcut          Heavy-atom cutoff for fragments; default is 3.3 Ang.
   -J              Compute spin-spin couplings; requires -gau or -orca

   -demon5         Set up quantum input files to use with deMon, v5
   -demon, -deMon  Set up quantum input files to use with deMon3
   -orca           Set up quantum input files to use with Orca (default)
   -gaussian       Set up quantum input files to use with Gaussian
   -jaguar         Set up quantum input files to use with Jaguar
   -qchem          Set up quantum input files to use with Q-Chem

   -qopt           Geometry optimize fragments with same program as for shifts
                       (default is no geometry optimization)
   -xtb            Geometry optimize fragments with xtb; requires the xtb
                       executable to be in the user's PATH
   -quick          Geometry optimize fragments with quick; requires the
                       quick.cuda exectuable to be in the user's PATH
   -tc             Geometry optimize fragments with terachem (experimental)

   -workdir        Do everything inside of a working directory named <basename>
   -nobuild        Skip the tleap & txmin steps; uses <basename>.pqr without
                       modification
   -nomin          Skip the minimization steps, but still build from 
                       <basename>.pdb

   -frcmod <file>  An additional frcmod file to load in to tleap
   -offlib <file>  An additional library file to load in to tleap
   -afterloadpdb "string"  Additional command(s) to give to tleap after
                   the pdbfile is loaded

===========================================================
EOD

}

check_afnmrhome() {
   if [ -z "$AFNMRHOME" ]; then
      echo ""
      echo "Your AFNMRHOME environment variable is not set!"
      exit 1
   fi
}

program="O"
qopt="F"
spinspin="F"
basis="D"
workdir="no"
min="yes"
build="yes"
functional="OLYP"
nbcut="3.3"
list=""
afterloadpdb=""

#------------------------------------------------------------------------------
#  Checking Arguments:
#------------------------------------------------------------------------------
if [ $# -lt 1 ]; then usage; exit 1;  fi

args=$@

cat > leap.in << EOF
source leaprc.protein.ff14SB
source leaprc.phosaa14SB
source leaprc.RNA.OL3
source leaprc.DNA.OL15
source leaprc.water.tip3p
source leaprc.gaff2
set default PBRadii mbondi3
EOF

while [ $# -gt 0 ]; do
    case "$1" in
        -list)        shift; list=`eval echo $1`;;
        -mixedb)      basis="M";;
        -seg1)        basis="T";;
        -seg2)        basis="Q";;
        -aug-seg1)    basis="A";;
        -seg0)        basis="D";;
        -shape)       basis="S";;
        -demon)       program="D";;
        -deMon)       program="D";;
        -demon5)      program="E";;
        -o3lyp)       functional="O3LYP";;
        -qopt)        qopt="Z";;
        -nbcut)       shift; nbcut="$1";;
        -xtb)         qopt="X";;
        -quick)       qopt="Q";;
        -J)           spinspin="T";;
        -tc)          qopt="T";;
        -orca)        program="O";;
        -jaguar)      program="J";;
        -gaussian)    program="G";;
        -gau)         program="G";;    # for backwards compatibility
        -qchem)       program="Q";;
        -sqm)         program="S";;
        -workdir)     workdir="T";;
        -nobuild)     build="no";;
        -nomin)       min="no";;
        -frcmod)      shift; echo "loadAmberParams $1" >> leap.in;;
        -offlib)      shift; echo "loadOFF $1" >> leap.in;;
        -afterloadpdb)  shift; afterloadpdb=$1;;
        -help)        usage; exit 0;;
        --help)       usage; exit 0;;
        -h)           usage; exit 0;;

        -*) echo "Error: unknown flag: $1"
            usage
            exit 1;;
        *) if [ $# -gt 1 ]; then
             echo "Too many arguments"
             usage
             exit 1
           fi
           break;;
    esac
    shift
done

if [ "$workdir" = "T" ]; then
   /bin/mkdir -p $1
   cd $1
   /bin/rm -f $1.pdb
   /bin/ln -s ../$1.pdb
   cp ../leap.in .
fi

if [ "$qopt" = "Z" ]; then
   if [ "$program" = "E" -o "$program" = "G" -o "$program" = "Q" \
                         -o "$program" = "O" ]; then
      qopt=$program
   else
      printf "Bad option for qopt: $qopt\n"
      exit 1
   fi
fi

#  Set the options to afnmr.x:
AFNMR_OPTIONS="$program $basis $qopt $functional $nbcut $spinspin"

#  Should not need to edit anything below here; (except to perhaps change 
#  detailed parameters in minimization)

#############################################################################

check_afnmrhome

echo "Running afnmr with arguments $args" > $1.afnmr.log

if [ $build = "yes" ]; then

echo "Running AFNMR on $1.pdb"

#============================================================================
#  Use tleap to create the Amber prmtop file:
#============================================================================
echo "Running tleap"
cat <<EOF >> leap.in
set default nocenter on
set default reorder_residues off
x = loadpdb $1.pdb
$afterloadpdb
saveamberparm x $1.parm7 $1.x
quit
EOF

$AFNMRHOME/bin/tleap -f leap.in > tleap.out
if [ ! -s $1.parm7 ]; then 
   echo "Error in tleap: check tleap.out or leap.log "
   exit 1
fi
echo "====== tleap.out =====================================================" \
     >> $1.afnmr.log
cat tleap.out >> $1.afnmr.log
/bin/rm leap.in tleap.out

if [ $min = "yes" ]; then

$AFNMRHOME/bin/ambpdb -p $1.parm7 -bres < $1.x > $1.0.pdb  2> /dev/null

#============================================================================
#  Do a constrained minimization to regularize the local geometries:
#============================================================================
echo "Minimization"

$AFNMRHOME/bin/txmin $1.parm7 $1.x $1.min.x > $1.min.o

if [ "$?" -gt 0 ]; then 
   echo "Error in txmin: check $1.min.o"
   exit 1
fi
echo "====== min.o =========================================================" \
     >> $1.afnmr.log
cat $1.min.o >> $1.afnmr.log
/bin/rm -f $1.min.o

#============================================================================
#  Create pqr for further use, with original residue numbers
#============================================================================
echo "====== add_pdb:  ======================================================" \
     >> $1.afnmr.log
$AFNMRHOME/bin/add_pdb -i $1.parm7 -o foozzz.parm7 -p $1.pdb >> $1.afnmr.log
if [ "$?" -gt 0 ]; then 
   echo "Error in add_pdb: check $1.afnmr.log"
   exit 1
fi
/bin/mv foozzz.parm7 $1.parm7

$AFNMRHOME/bin/ambpdb -p $1.parm7 -pqr -ext -bres < $1.min.x > $1.min.pqr 2> /dev/null
/bin/rm -f $1.pqr
ln -s $1.min.pqr $1.pqr


#cpptraj must come from AmberTools:
if true; then
#============================================================================
#  Check how far the struture has moved from the initial conformation:
#============================================================================
backbone="@C,CA,N,P,O3',O5',C3',C4',C5'"  # should work for both proteins
                                          # and nucleic acids
$AMBERHOME/bin/cpptraj $1.parm7 <<EOF > cpptraj.out
reference $1.x
trajin $1.min.x
rms all_heavy reference !@H= out rms.dat
rms backbone reference $backbone out rms.dat
EOF

if [ "$?" -gt 0 ]; then 
   echo "Error in cpptraj: check cpptraj.out"
   exit 1
fi
echo "====== rms.dat  ======================================================" \
     >> $1.afnmr.log
cat rms.dat >> $1.afnmr.log
/bin/rm cpptraj.out rms.dat
fi

#  end of "if min=yes" block:
else
    echo "Skipping minimization"
    #========================================================================
    #  Create pqr for further use, with original residue numbers
    #========================================================================
    echo "====== add_pdb:  ======================================================" \ >> $1.afnmr.log
    $AFNMRHOME/bin/add_pdb -i $1.parm7 -o foozzz.parm7 -p $1.pdb >> $1.afnmr.log
    if [ "$?" -gt 0 ]; then 
       echo "Error in add_pdb: check $1.afnmr.log"
       exit 1
    fi
    /bin/mv foozzz.parm7 $1.parm7

    $AFNMRHOME/bin/ambpdb -p $1.parm7 -pqr -ext -bres < $1.x > $1.pqr 2> /dev/null
    ln -s $1.x $1.min.x

fi

#  end of "if build=yes" block:
else
    /bin/rm -f leap.in
    echo "nobuild: Running AFNMR on $1.pqr"
fi

#============================================================================
#  write a script to get MS surface points:
#============================================================================
cat <<EOF2 > runms.solsurf
#! /usr/bin/env perl
#
#----------------------------------------------------------------
#   run the "ms" program from input pqr file,(s) to get solvent-
#   accesible surface area.  Results to STDOUT
#----------------------------------------------------------------
#

#  solvent accessible radius for solvent probe radius of 1.4:
open (MSRAD, ">ms.rad") || die "can't open ms.rad\n";
print MSRAD <<"EOF";
    1      3.25                      phosphorus;
    2      2.90                      oxygen, Na+
    4      2.95                      nitrogen
    7      3.10                      carbon, allatom
    8      3.20                      sulfur, Cl-
   15      2.60                      hydrogen
   16      3.03                      potassium
EOF

close(MSRAD); 

foreach \$file (@ARGV) {

#   change a pdb or pqr file to atm format, using our standard
#     atom types
#
open (PQR, "\$file") || die "can't find input file \$file\n";
open (ATM, ">input.atm") || die "can't open input.atm\n";

\$type{" H"} = 15; \$type{" C"} = 7; \$type{" N"} = 4; \$type{" P"} = 1;
\$type{" O"} = 2; \$type{" S"} = 8; \$type{" F"} = 4; \$type{" K"} = 16;
\$type{"Na"} = 2; \$type{"Cl"} = 8;

while (<PQR>) { 
	next unless /^ATOM|^HETATM/;
	( \$atno, \$atname, \$alt, \$resname, \$resno, \$x, \$y, \$z, \$elem) =
	    unpack("x7 a4 x a4 a a3 x3 a3 x4 a8 a8 a8 x22 a2",\$_);

	\$atname =~ s/^\s+//;  # remove leading spaces
	\$atname =~ s/\s+\$//;  # remove trailing spaces

	if ( defined(\$type{\$elem}) ){
		\$r = \$type{\$elem};
	} else {
		print "Error in atom type: elem = |$elem|\n";
        exit 1;
	}
	printf ATM "%10.3f%10.3f%10.3f%5d    2    1\n",\$x,\$y,\$z,\$r;
}

close(ATM);

system ("$AFNMRHOME/bin/ms -atm input.atm -rad ms.rad -d 0.5 -rp 0.0 ");
unlink("input.atm");

open (CONTACT, "contact") || die "contact file not found\n";
open (SRF, ">surf.pos") || die "cannot open surf.pos\n";

#
#  convert a "contact" solvent-accessible surface file to
#  one where each line corresponds a given surface point
#
while (<CONTACT>) {
	@_ = split(' ', \$_); 
    printf SRF "%10.3f%10.3f%10.3f\n", \$_[4],\$_[5],\$_[6];
}
close(CONTACT);
unlink("contact");

}
unlink("ms.rad");
EOF2

chmod +x runms.solsurf

# echo "====== runms.solsurf: ===============================================" >> $1.afnmr.log
# cat runms.solsurf >> $1.afnmr.log

#============================================================================
#   Use the solinprot method to get the environment influence
#============================================================================
cat <<EOF3 > runsolinprot
#!/bin/sh

echo "MS"
./runms.solsurf \$1.pqr
if [ "\$?" -gt 0 ]; then 
   echo "Error in ms: check afnmr.log"
   exit 1
fi

echo "solinprot"
cat <<EOF > \$1.ogm
ON_GEOM_CENT 101 2.0
ON_GEOM_CENT 101 1.0
ON_GEOM_CENT 101 0.25
EOF

grep -v MOD \$1.pqr | awk '/ATOM/{print \$6,\$7,\$8}' > \$1.fpt

$AFNMRHOME/bin/solinprot -epsin1 1.0 -epsin2 4.0 -ionicstr 0.2 \
     -ProteinField -ReactionField \$1 \$1.prot 
if [ "\$?" -gt 0 ]; then 
   echo "Error in solinprot: check afnmr.log"
   exit 1
fi
/bin/rm \$1.ogm

paste \$1.fpt \$1.rf \$1.pf | awk '{print \$1,\$2,\$3,\$4+\$5}' > input.xyzv
/bin/rm \$1.fpt \$1.rf \$1.pf

echo "gridprune"
$AFNMRHOME/bin/gridprune -solinprot < \$1.pqr 
if [ "\$?" -gt 0 ]; then 
   echo "Error in gridprune: check afnmr.log"
   exit 1
fi
$AFNMRHOME/bin/pair < check.dat
/bin/rm input.xyzv surf.pos check.dat \$1.prot.pqr
exit 0

EOF3
chmod +x runsolinprot

#============================================================================
#  Run the fragment program to create the quantum chemistry input files;
#============================================================================

echo "====== afnmr command line: ==========================================" >> $1.afnmr.log
echo "afnmr.x $AFNMR_OPTIONS $1 $list"
echo "afnmr.x $AFNMR_OPTIONS $1 $list" > afnmr.out
$AFNMRHOME/bin/afnmr.x  $AFNMR_OPTIONS  $1 $list >> afnmr.out
if [ "$?" -gt 0 ]; then 
   echo "Error in afnmr: check afnmr.out"
   exit 1
fi
cat afnmr.out >> $1.afnmr.log
/bin/rm afnmr.out

#============================================================================
#  Some fine file clean-ups  (optional)
#============================================================================
/bin/rm -f $1.min.x \
       srfchg.pos runms.solsurf runsolinprot leap.log 

if [ "$build" = "yes" ]; then
	/bin/rm -f $1.x $1.parm7
fi

if [ "$workdir" = "T" ]; then
   cd ../
   /bin/rm -f leap.in
fi

echo "done"
